# ======================================================================================
# Project metadata
# ======================================================================================

[project]
name = "lcm"
description = "lcm aims to generalize and facilitate the specification, solving, and estimation of dynamic choice models."
requires-python = ">=3.12"
dependencies = [
    "dags",
    "numpy",
    "pandas",
]
dynamic = ["version"]
keywords = [
    "Dynamic programming",
    "Econometrics",
    "Economics",
    "Estimation",
    "Life cycle models",
    "Statistics",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
]
authors = [
    { name = "Tim Mensinger", email = "mensingertim@gmail.com" },
    { name = "Janos Gabler" },
]
maintainers = [
    { name = "Tim Mensinger", email = "mensingertim@gmail.com" },
    { name = "Hans-Martin von Gaudecker", email = "hmgaudecker@uni-bonn.de" },
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "MIT"

[project.urls]
Repository = "https://github.com/opensourceeconomics/lcm"
Github = "https://github.com/opensourceeconomics/lcm"
Tracker = "https://github.com/OpenSourceEconomics/lcm/issues"


# ======================================================================================
# Build system configuration
# ======================================================================================

[build-system]
requires = ["hatchling", "hatch_vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
version-file = "src/lcm/_version.py"

[tool.hatch.build.targets.sdist]
exclude = ["tests"]
only-packages = true

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true


# ======================================================================================
# Pixi
# ======================================================================================

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

# Development Dependencies (conda)
# --------------------------------------------------------------------------------------

[tool.pixi.dependencies]
python = "3.12"
scipy = "<=1.13"
pybaum = "*"
jupyterlab = "*"
plotly = ">=5.2,<6"
pre-commit = "*"
snakeviz = "*"
memory_profiler = "*"

[tool.pixi.target.unix.dependencies]
jax = ">=0.4.20"
jaxlib = ">=0.4.20"

# Development Dependencies (pypi)
# --------------------------------------------------------------------------------------

[tool.pixi.pypi-dependencies]
lcm = {path = ".", editable = true}
pdbp = "*"

[tool.pixi.target.win-64.pypi-dependencies]
jax = { version = ">=0.4.20", extras = ["cpu"] }
jaxlib = ">=0.4.20"

# Features and Tasks
# --------------------------------------------------------------------------------------

[tool.pixi.feature.cuda]
platforms = ["linux-64"]
system-requirements = {cuda = "12"}

[tool.pixi.feature.cuda.target.linux-64.dependencies]
cuda-nvcc = ">=12"
jax = ">=0.4.20"
jaxlib = { version = ">=0.4.20", build = "cuda12*" }

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"

[tool.pixi.feature.test.tasks]
tests = "pytest tests"
tests-with-cov = "pytest tests --cov-report=xml --cov=./"
explanation-notebooks = "jupyter execute explanations/*.ipynb"

[tool.pixi.feature.mypy.dependencies]
mypy = ">=1.11.2"
pandas-stubs = "*"
matplotlib = "*"  # required because of pandas

[tool.pixi.feature.mypy.tasks]
mypy = "mypy src"

# Environments
# --------------------------------------------------------------------------------------

[tool.pixi.environments]
cuda = {features = ["cuda"], solve-group = "cuda"}
mypy = {features = ["mypy"], solve-group = "default"}
test-cpu = {features = ["test"], solve-group = "default"}
test-gpu = {features = ["test", "cuda"], solve-group = "cuda"}


# ======================================================================================
# Ruff configuration
# ======================================================================================

[tool.ruff]
target-version = "py312"
fix = true
exclude = ["src/lcm/sandbox"]

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    # missing type annotation
    "ANN001",

    # missing type annotation for `*args`
    "ANN002",

    # missing type annotation for `**kwargs`
    "ANN003",

    # missing return type annotation for public function
    "ANN201",

    # missing return type annotation for private function
    "ANN202",

    # Missing docstring in public module
    "D100",

    # missing docstring in public function
    "D103",

    # missing docstring in public package
    "D104",

    # exception must not use a string literal
    "EM101",

    # exception must not use an f-string literal
    "EM102",

    # line contains a todo
    "FIX002",

    # Too many arguments to function call
    "PLR0913",

    # use of `assert` detected
    "S101",

    # `pickle` module is unsafe
    "S301",

    # Private member accessed: `_stochastic_info`
    "SLF001",

    # long messages outside the exception class
    "TRY003",

    # Missing docstring in magic method
    "D105",

    # Rules ignored to avoid conflict with formatter
    # ----------------------------------------------------------------------------------
    "COM812",
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"docs/source/conf.py" = ["E501", "ERA001", "DTZ005"]
"tests/test_*.py" = ["PLR2004"]
"examples/*" = ["INP001"]
"explanations/*" = ["INP001", "B018", "T201", "E402", "PD008"]
"scripts/*" = ["INP001", "D101", "RET503"]
"**/*.ipynb" = ["FBT003", "E402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# ======================================================================================
# Pytest configuration
# ======================================================================================

[tool.pytest.ini_options]
markers = [
    "wip: Tests that are work-in-progress.",
    "slow: Tests that take a long time to run and are skipped in continuous integration.",
    "illustrative: Tests are designed for illustrative purposes",
]
norecursedirs = ["docs", ".envs"]


# ======================================================================================
# yamlfix configuration
# ======================================================================================

[tool.yamlfix]
line_length = 88
sequence_style = "block_style"
none_representation = "null"

# ======================================================================================
# mypy configuration
# ======================================================================================

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = ["dags", "dags.signature", "pybaum"]
ignore_missing_imports = true
