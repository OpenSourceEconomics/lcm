from lcm.create_params import create_params
from lcm.process_model import process_model


def get_lcm_function(model, targets="solve"):  # noqa: U100
    """Entry point for users to get high level functions generated by lcm.

    Advanced users might to use lower level functions instead, but can read the source
    code of this function to see how the lower level components are meant to be used.

    Notes
    -----

    - Further targets could be "likelihood" or "simulate"
    - We might need additional arguments such as solver_options that we want to take
      separate from a model specification.

    Args:
        model (dict): Model specification.
        targets (str or iterable): The requested function types. Currently only
            "solve" is supported.

    Returns:
        callable: A function that takes params and returns the requested targets.
        dict: A parameter dict where all parameter values are initialized to NaN.

    """
    if targets != "solve":
        raise NotImplementedError()

    # call process_model
    _mod = process_model(model)  # noqa: F841

    # create params
    # todo: this needs to work with a processed model instead
    params = create_params(model)

    # create state_choice_spaces and indexers
    # create choice segments

    # create continuous_choice_grids

    # create emax_calculators

    # create utility_and_feasibility_functions

    # create built_in_sovers

    # select requested solver

    # partial arguments into solver

    return params
