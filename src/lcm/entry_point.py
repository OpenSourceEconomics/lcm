from collections.abc import Callable
from functools import partial
from typing import Literal

import jax
import pandas as pd
from jax import Array

from lcm.conditional_continuation import (
    get_compute_conditional_continuation_policy,
    get_compute_conditional_continuation_value,
)
from lcm.discrete_problem import get_solve_discrete_problem
from lcm.input_processing import process_model
from lcm.logging import get_logger
from lcm.next_state import get_next_state_function
from lcm.simulation.simulate import simulate
from lcm.solution.solve_brute import solve
from lcm.solution.state_choice_space import create_state_choice_space
from lcm.typing import ParamsDict, Target
from lcm.user_model import Model
from lcm.utility_and_feasibility import (
    get_utility_and_feasibility_function,
)


def get_lcm_function(
    model: Model,
    *,
    targets: Literal["solve", "simulate", "solve_and_simulate"],
    debug_mode: bool = True,
    jit: bool = True,
) -> tuple[Callable[..., list[Array] | pd.DataFrame], ParamsDict]:
    """Entry point for users to get high level functions generated by lcm.

    Return the function to solve and/or simulate a model along with a template for the
    parameters.

    Advanced users might want to use lower level functions instead, but can read the
    source code of this function to see how the lower level components are meant to be
    used.

    Args:
        model: User model specification.
        targets: The requested function types. Currently only "solve", "simulate" and
            "solve_and_simulate" are supported.
        debug_mode: Whether to log debug messages.
        jit: Whether to jit the returned function.

    Returns:
        - A function that takes params (and possibly other arguments, such as initial
          states in the simulate case) and returns the requested targets.
        - A parameter dictionary where all parameter values are initialized to NaN.

    """
    # ==================================================================================
    # preparations
    # ==================================================================================
    if targets not in {"solve", "simulate", "solve_and_simulate"}:
        raise NotImplementedError

    _mod = process_model(model)
    last_period = _mod.n_periods - 1

    logger = get_logger(debug_mode=debug_mode)

    # ==================================================================================
    # create list of continuous choice grids
    # ==================================================================================
    # for now they are the same in all periods but this will change.
    _subset = _mod.variable_info.query("is_continuous & is_choice").index.tolist()
    _choice_grids = {k: _mod.grids[k] for k in _subset}
    continuous_choice_grids = [_choice_grids] * _mod.n_periods

    # ==================================================================================
    # Initialize other argument lists
    # ==================================================================================
    state_choice_spaces = []
    state_space_infos = []
    compute_ccv_functions = []
    compute_ccv_policy_functions = []
    choice_segments = []  # type: ignore[var-annotated]
    emax_calculators = []

    # ==================================================================================
    # Create stace choice space for each period
    # ==================================================================================
    for period in range(_mod.n_periods):
        is_last_period = period == last_period

        # call state space creation function, append trivial items to their lists
        # ==============================================================================
        state_choice_space, state_space_info = create_state_choice_space(
            model=_mod,
            is_last_period=is_last_period,
        )

        state_choice_spaces.append(state_choice_space)
        choice_segments.append(None)
        state_space_infos.append(state_space_info)

    # ==================================================================================
    # Shift space info (in period t we require the space info of period t+1)
    # ==================================================================================
    state_space_infos = state_space_infos[1:] + [{}]  # type: ignore[list-item]

    # ==================================================================================
    # Create model functions
    # ==================================================================================
    for period in range(_mod.n_periods):
        is_last_period = period == last_period

        # create the compute conditional continuation value functions and append to list
        # ==============================================================================
        u_and_f = get_utility_and_feasibility_function(
            model=_mod,
            next_state_space_info=state_space_infos[period],
            period=period,
            is_last_period=is_last_period,
        )

        compute_ccv = get_compute_conditional_continuation_value(
            utility_and_feasibility=u_and_f,
            continuous_choice_variables=tuple(_choice_grids),
        )
        compute_ccv_functions.append(compute_ccv)

        compute_ccv_argmax = get_compute_conditional_continuation_policy(
            utility_and_feasibility=u_and_f,
            continuous_choice_variables=tuple(_choice_grids),
        )
        compute_ccv_policy_functions.append(compute_ccv_argmax)

        # create list of emax_calculators
        # ==============================================================================
        calculator = get_solve_discrete_problem(
            random_utility_shock_type=_mod.random_utility_shocks,
            variable_info=_mod.variable_info,
            is_last_period=is_last_period,
        )
        emax_calculators.append(calculator)

    # ==================================================================================
    # select requested solver and partial arguments into it
    # ==================================================================================
    _solve_model = partial(
        solve,
        state_choice_spaces=state_choice_spaces,
        continuous_choice_grids=continuous_choice_grids,
        compute_ccv_functions=compute_ccv_functions,
        emax_calculators=emax_calculators,
        logger=logger,
    )

    solve_model = jax.jit(_solve_model) if jit else _solve_model

    _next_state_simulate = get_next_state_function(model=_mod, target=Target.SIMULATE)
    simulate_model = partial(
        simulate,
        continuous_choice_grids=continuous_choice_grids,
        compute_ccv_policy_functions=compute_ccv_policy_functions,
        model=_mod,
        next_state=jax.jit(_next_state_simulate),
        logger=logger,
    )

    target_func: Callable[..., list[Array] | pd.DataFrame]

    if targets == "solve":
        target_func = solve_model
    elif targets == "simulate":
        target_func = simulate_model
    elif targets == "solve_and_simulate":
        target_func = partial(simulate_model, solve_model=solve_model)

    return target_func, _mod.params
